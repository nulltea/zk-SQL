/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface ZkSQLInterface extends utils.Interface {
  functions: {
    "createTable(string,uint256)": FunctionFragment;
    "deleteVerifier()": FunctionFragment;
    "execRequest(uint8,uint256,uint256,bytes)": FunctionFragment;
    "insertVerifier()": FunctionFragment;
    "request(string,uint256)": FunctionFragment;
    "requestsCommitments(uint256)": FunctionFragment;
    "tableCommitments(string)": FunctionFragment;
    "updateVerifier()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "createTable"
      | "deleteVerifier"
      | "execRequest"
      | "insertVerifier"
      | "request"
      | "requestsCommitments"
      | "tableCommitments"
      | "updateVerifier"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createTable",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteVerifier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "execRequest",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "insertVerifier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "request",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "requestsCommitments",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "tableCommitments",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateVerifier",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "createTable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "execRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "insertVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "request", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "requestsCommitments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tableCommitments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateVerifier",
    data: BytesLike
  ): Result;

  events: {
    "RequestPosted(address,uint256)": EventFragment;
    "TableCreated(string,uint256)": EventFragment;
    "TableUpdated(string,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "RequestPosted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TableCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TableUpdated"): EventFragment;
}

export interface RequestPostedEventObject {
  issuer: string;
  commitment: BigNumber;
}
export type RequestPostedEvent = TypedEvent<
  [string, BigNumber],
  RequestPostedEventObject
>;

export type RequestPostedEventFilter = TypedEventFilter<RequestPostedEvent>;

export interface TableCreatedEventObject {
  table: string;
  commitment: BigNumber;
}
export type TableCreatedEvent = TypedEvent<
  [string, BigNumber],
  TableCreatedEventObject
>;

export type TableCreatedEventFilter = TypedEventFilter<TableCreatedEvent>;

export interface TableUpdatedEventObject {
  table: string;
  commitment: BigNumber;
}
export type TableUpdatedEvent = TypedEvent<
  [string, BigNumber],
  TableUpdatedEventObject
>;

export type TableUpdatedEventFilter = TypedEventFilter<TableUpdatedEvent>;

export interface ZkSQL extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ZkSQLInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createTable(
      table: PromiseOrValue<string>,
      commitment: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deleteVerifier(overrides?: CallOverrides): Promise<[string]>;

    execRequest(
      opcode: PromiseOrValue<BigNumberish>,
      argsCommitment: PromiseOrValue<BigNumberish>,
      newCommitment: PromiseOrValue<BigNumberish>,
      proof: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    insertVerifier(overrides?: CallOverrides): Promise<[string]>;

    request(
      table: PromiseOrValue<string>,
      argsCommitment: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    requestsCommitments(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    tableCommitments(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    updateVerifier(overrides?: CallOverrides): Promise<[string]>;
  };

  createTable(
    table: PromiseOrValue<string>,
    commitment: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deleteVerifier(overrides?: CallOverrides): Promise<string>;

  execRequest(
    opcode: PromiseOrValue<BigNumberish>,
    argsCommitment: PromiseOrValue<BigNumberish>,
    newCommitment: PromiseOrValue<BigNumberish>,
    proof: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  insertVerifier(overrides?: CallOverrides): Promise<string>;

  request(
    table: PromiseOrValue<string>,
    argsCommitment: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  requestsCommitments(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  tableCommitments(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  updateVerifier(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    createTable(
      table: PromiseOrValue<string>,
      commitment: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    deleteVerifier(overrides?: CallOverrides): Promise<string>;

    execRequest(
      opcode: PromiseOrValue<BigNumberish>,
      argsCommitment: PromiseOrValue<BigNumberish>,
      newCommitment: PromiseOrValue<BigNumberish>,
      proof: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    insertVerifier(overrides?: CallOverrides): Promise<string>;

    request(
      table: PromiseOrValue<string>,
      argsCommitment: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    requestsCommitments(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    tableCommitments(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateVerifier(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "RequestPosted(address,uint256)"(
      issuer?: null,
      commitment?: null
    ): RequestPostedEventFilter;
    RequestPosted(issuer?: null, commitment?: null): RequestPostedEventFilter;

    "TableCreated(string,uint256)"(
      table?: null,
      commitment?: null
    ): TableCreatedEventFilter;
    TableCreated(table?: null, commitment?: null): TableCreatedEventFilter;

    "TableUpdated(string,uint256)"(
      table?: null,
      commitment?: null
    ): TableUpdatedEventFilter;
    TableUpdated(table?: null, commitment?: null): TableUpdatedEventFilter;
  };

  estimateGas: {
    createTable(
      table: PromiseOrValue<string>,
      commitment: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deleteVerifier(overrides?: CallOverrides): Promise<BigNumber>;

    execRequest(
      opcode: PromiseOrValue<BigNumberish>,
      argsCommitment: PromiseOrValue<BigNumberish>,
      newCommitment: PromiseOrValue<BigNumberish>,
      proof: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    insertVerifier(overrides?: CallOverrides): Promise<BigNumber>;

    request(
      table: PromiseOrValue<string>,
      argsCommitment: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    requestsCommitments(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tableCommitments(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateVerifier(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    createTable(
      table: PromiseOrValue<string>,
      commitment: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deleteVerifier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    execRequest(
      opcode: PromiseOrValue<BigNumberish>,
      argsCommitment: PromiseOrValue<BigNumberish>,
      newCommitment: PromiseOrValue<BigNumberish>,
      proof: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    insertVerifier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    request(
      table: PromiseOrValue<string>,
      argsCommitment: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    requestsCommitments(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tableCommitments(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateVerifier(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
